// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    // Handles A Register
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=ToStoreInA);
    Not(in=instruction[15], out=isA);
    Or(a=instruction[5], b=isA, out=shouldLoad);
    ARegister(in=ToStoreInA, load=shouldLoad, out=ARegOut, out[0..14]=addressM);


    // Handles A/M into ALU
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=AOrM);
    // Mux16(a=inM, b=ARegOut, sel=instruction[3], out=AOrM);


    // Handles D Reg
    And(a=instruction[15], b=instruction[4], out= shouldLoadD);
    DRegister(in=ALUOut, load=shouldLoadD, out=DRegOut);


    // Handles ALU
    ALU(x=DRegOut, y=AOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUOut, zr=zr, ng=ng);

    // Handles writeM
    And(a=instruction[15], b=instruction[3], out=writeM);



    // Handles jump decision

    // j1 out < 0
    And(a=instruction[2], b=ng, out=isLessThanZero);

    // j2 out == 0
    And(a=instruction[1], b=zr, out=isEqualToZero);

    // j3 out > 0
    Or(a=zr, b=ng, out=zrOrNg);
    Not(in=zrOrNg, out=NotZrOrNg);
    And(a=instruction[0], b=NotZrOrNg, out=isGreaterThanZero);


    Or(a=isLessThanZero, b=isEqualToZero, out=isLessOrEqualToZero);
    Or(a=isLessOrEqualToZero, b=isGreaterThanZero, out=LessAndEqualAndGreater);

    // Checks if 101
    // And(a=instruction[0], b=instruction[2], out=GreaterAndLess);
    // Not(in=instruction[1], out=NotEqualZero);
    // And(a=GreaterAndLess, b=NotEqualZero, out=isJNE);
    // Not(in=zr, out=NotZr);
    // And(a=isJNE, b=NotZr, out=JNETrue);
    // Or(a=JNETrue, b=LessAndEqualAndGreater, out=JNEOveride);    

    // Handles 000 or 111
    And(a=instruction[0], b=instruction[1], out=ZeroAndOne);
    And(a=ZeroAndOne, b=instruction[2], out=JumpRegardless);

    Or(a=instruction[0], b=instruction[1], out=ZeroOrOne);
    Or(a=ZeroOrOne, b=instruction[2], out=NotAllZero);

    And(a=LessAndEqualAndGreater, b=NotAllZero, out=ZeroOveride);
    Or(a=ZeroOveride, b=JumpRegardless, out=BothOverides);

    // If A type, do not jump at all
    And(a=BothOverides, b=instruction[15], out=JmpResult);


    // Handles PC
    Not(in=JmpResult, out=ShouldInc);
    PC(in=ARegOut, load=JmpResult,  inc=ShouldInc, reset=reset, out[0..14]=pc);

}


